
--- .contextignore.example ---
your_file_name_here.txt
your_file_name_here_2.json

-- REPLACE WITH THE FILES YOU WANT TO IGNORE --
--- LICENSE ---
MIT License

Copyright (c) 2025 Advaith Sanil Kumar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
--- poetry.lock ---
# This file is automatically @generated by Poetry 2.1.3 and should not be changed by hand.

[[package]]
name = "click"
version = "8.1.8"
description = "Composable command line interface toolkit"
optional = false
python-versions = ">=3.7"
groups = ["main"]
files = [
    {file = "click-8.1.8-py3-none-any.whl", hash = "sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2"},
    {file = "click-8.1.8.tar.gz", hash = "sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a"},
]

[package.dependencies]
colorama = {version = "*", markers = "platform_system == \"Windows\""}

[[package]]
name = "colorama"
version = "0.4.6"
description = "Cross-platform colored terminal text."
optional = false
python-versions = "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7"
groups = ["main"]
markers = "platform_system == \"Windows\""
files = [
    {file = "colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6"},
    {file = "colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44"},
]

[[package]]
name = "markdown-it-py"
version = "3.0.0"
description = "Python port of markdown-it. Markdown parsing, done right!"
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "markdown-it-py-3.0.0.tar.gz", hash = "sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb"},
    {file = "markdown_it_py-3.0.0-py3-none-any.whl", hash = "sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1"},
]

[package.dependencies]
mdurl = ">=0.1,<1.0"

[package.extras]
benchmarking = ["psutil", "pytest", "pytest-benchmark"]
code-style = ["pre-commit (>=3.0,<4.0)"]
compare = ["commonmark (>=0.9,<1.0)", "markdown (>=3.4,<4.0)", "mistletoe (>=1.0,<2.0)", "mistune (>=2.0,<3.0)", "panflute (>=2.3,<3.0)"]
linkify = ["linkify-it-py (>=1,<3)"]
plugins = ["mdit-py-plugins"]
profiling = ["gprof2dot"]
rtd = ["jupyter_sphinx", "mdit-py-plugins", "myst-parser", "pyyaml", "sphinx", "sphinx-copybutton", "sphinx-design", "sphinx_book_theme"]
testing = ["coverage", "pytest", "pytest-cov", "pytest-regressions"]

[[package]]
name = "mdurl"
version = "0.1.2"
description = "Markdown URL utilities"
optional = false
python-versions = ">=3.7"
groups = ["main"]
files = [
    {file = "mdurl-0.1.2-py3-none-any.whl", hash = "sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8"},
    {file = "mdurl-0.1.2.tar.gz", hash = "sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba"},
]

[[package]]
name = "pathspec"
version = "0.11.2"
description = "Utility library for gitignore style pattern matching of file paths."
optional = false
python-versions = ">=3.7"
groups = ["main"]
files = [
    {file = "pathspec-0.11.2-py3-none-any.whl", hash = "sha256:1d6ed233af05e679efb96b1851550ea95bbb64b7c490b0f5aa52996c11e92a20"},
    {file = "pathspec-0.11.2.tar.gz", hash = "sha256:e0d8d0ac2f12da61956eb2306b69f9469b42f4deb0f3cb6ed47b9cce9996ced3"},
]

[[package]]
name = "pygments"
version = "2.19.2"
description = "Pygments is a syntax highlighting package written in Python."
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "pygments-2.19.2-py3-none-any.whl", hash = "sha256:86540386c03d588bb81d44bc3928634ff26449851e99741617ecb9037ee5ec0b"},
    {file = "pygments-2.19.2.tar.gz", hash = "sha256:636cb2477cec7f8952536970bc533bc43743542f70392ae026374600add5b887"},
]

[package.extras]
windows-terminal = ["colorama (>=0.4.6)"]

[[package]]
name = "rich"
version = "14.0.0"
description = "Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal"
optional = false
python-versions = ">=3.8.0"
groups = ["main"]
files = [
    {file = "rich-14.0.0-py3-none-any.whl", hash = "sha256:1c9491e1951aac09caffd42f448ee3d04e58923ffe14993f6e83068dc395d7e0"},
    {file = "rich-14.0.0.tar.gz", hash = "sha256:82f1bc23a6a21ebca4ae0c45af9bdbc492ed20231dcb63f297d6d1021a9d5725"},
]

[package.dependencies]
markdown-it-py = ">=2.2.0"
pygments = ">=2.13.0,<3.0.0"
typing-extensions = {version = ">=4.0.0,<5.0", markers = "python_version < \"3.11\""}

[package.extras]
jupyter = ["ipywidgets (>=7.5.1,<9)"]

[[package]]
name = "toml"
version = "0.10.2"
description = "Python Library for Tom's Obvious, Minimal Language"
optional = false
python-versions = ">=2.6, !=3.0.*, !=3.1.*, !=3.2.*"
groups = ["main"]
files = [
    {file = "toml-0.10.2-py2.py3-none-any.whl", hash = "sha256:806143ae5bfb6a3c6e736a764057db0e6a0e05e338b5630894a5f779cabb4f9b"},
    {file = "toml-0.10.2.tar.gz", hash = "sha256:b3bda1d108d5dd99f4a20d24d9c348e91c4db7ab1b749200bded2f839ccbe68f"},
]

[[package]]
name = "typing-extensions"
version = "4.13.2"
description = "Backported and Experimental Type Hints for Python 3.8+"
optional = false
python-versions = ">=3.8"
groups = ["main"]
markers = "python_version < \"3.11\""
files = [
    {file = "typing_extensions-4.13.2-py3-none-any.whl", hash = "sha256:a439e7c04b49fec3e5d3e2beaa21755cadbbdc391694e28ccdd36ca4a1408f8c"},
    {file = "typing_extensions-4.13.2.tar.gz", hash = "sha256:e6c81219bd689f51865d9e372991c540bda33a0379d5573cddb9a3a23f7caaef"},
]

[metadata]
lock-version = "2.1"
python-versions = ">=3.8"
content-hash = "bdf4e82ea859a0caab665c39566c9f6a1a1441dd885c8cbe0b925211d31a8b47"

--- README.md ---
# Ctrl+C



## Installation

```bash
pip install ctrlc
```

## Basic Usage
```bash
ctrlc run
```

## Flags & Options

- `--ignore-files [none|all]`

    - none: donâ€™t respect any .gitignore/.contextignore.

    - all: always respect both if present.

- `--threshold <bytes>`

    Skip files larger than this size (in bytes).

- `--compress [none|gzip|zip]`

    Output compression. Default none.

## Configuration

Create optional `pyproject.toml` section `[tool.ctrlc]` or `.contextignore` in root.

```
[tool.ctrlc]
ignore_files = "all"
threshold = 1048576
template = "default"
```

## Example Usage
```bash
ctrlc run --compress gzip --threshold 1000000
```
--- requirements.txt ---
click==8.1.8
colorama==0.4.6
markdown-it-py==3.0.0
mdurl==0.1.2
pathspec==0.11.2
pygments==2.19.2
rich==14.0.0
toml==0.10.2

--- ctrlc\cli.py ---
import click, os
from .core import collect_files, write_bundle
from .config import load_config

from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table

console = Console()

class RichHelpGroup(click.Group):
    def format_help(self, ctx, formatter):
        # rich replaces the entire help output
        self.rich_help()

    def invoke(self, ctx):
        if "--help" in ctx.args or "-h" in ctx.args:
            self.rich_help()
            ctx.exit()
        super().invoke(ctx)

    def rich_help(self):
        console.print(Panel.fit(
            Text.from_markup("[bold]Bundle your codebase context[/] for AI tools, debugging, and sharing.", justify="center"),
            title="[bold green]ðŸ“¦ Ctrl+C",
            border_style="green"
        ))

        table = Table.grid(padding=(0, 2))
        table.add_column("Option", style="cyan bold")
        table.add_column("Description", style="white")

        table.add_row("--ignore-files \\[none|all|git|context]",
                      "Ignore files using .gitignore/.contextignore. Default: all.")
        table.add_row("--threshold <bytes>",
                      "Skip files larger than this size (in bytes).")
        table.add_row("--compress \\[none|gzip|zip|tar.gz]",
                      "Compress the output. Default: none.")
        table.add_row("--output <filename>",
                      "Name of output file (e.g. context.txt)")

        console.print(table)
        console.print("\n[bold yellow]Example:[/] [green]ctrlc run --compress gzip --threshold 1000000\n[/]")

@click.group(cls=RichHelpGroup)
def main():
    """Ctrl+C: bundle project context"""
    pass

@main.command()
@click.option(
    '--ignore-files',
    type=click.Choice(['none', 'all', 'git', 'context']),
    default=None,
    show_choices=False,
    help='Ignore patterns: none, git, context, or all'
)
@click.option(
    '--threshold',
    type=int,
    default=None,
    help='Skip files larger than this size in bytes'
)
@click.option(
    '--compress',
    type=click.Choice(['none', 'gzip', 'zip', 'tar.gz'], case_sensitive=False),
    default='none',
    show_choices=False,
    help='Compression method: none, gzip, zip, or tar.gz'
)
@click.option(
    '--output',
    default='context.txt',
    help='Base output filename'
)
def run(ignore_files, threshold, compress, output):
    root = os.getcwd()
    cfg = load_config(root)
    mode = ignore_files or cfg.get('ignore_files', 'all')
    thr = threshold or cfg.get('threshold')

    # files, git_ignored, ctx_ignored, size_skipped, builtin_ignored = collect_files(root, mode, threshold)
    files, git_ignored, ctx_ignored, size_skipped, builtin_ignored, git_exists, ctx_exists = collect_files(root, mode, threshold)
    write_bundle(root, output, files, compress)
    # Reporting
    console.print(Panel.fit(f"Wrote {len(files)} files to {output}", title="Ctrl+C", style="green"))

    # TO BE CHANGED TO RICH PRINTS
    # if builtin_ignored:
    #     click.echo(f"{builtin_ignored} files skipped due to built-in ignore rules (e.g., .git, node_modules, etc.)")

    # # Gitignore reporting
    # if mode in ('all', 'git'):
    #     if git_exists:
    #         if git_ignored:
    #             click.echo(f".gitignore file found and used to ignore {git_ignored} files")
    #         else:
    #             click.echo(".gitignore file found but did not match any files")
    #     else:
    #         click.echo(".gitignore mode active, but no .gitignore file found")

    # # Contextignore reporting
    # if mode in ('all', 'context'):
    #     if ctx_exists:
    #         if ctx_ignored:
    #             click.echo(f".contextignore file found and used to ignore {ctx_ignored} files")
    #         else:
    #             click.echo(".contextignore file found but did not match any files")
    #     else:
    #         click.echo(".contextignore mode active, but no .contextignore file found")

    # Size threshold
    if threshold:
        click.echo(f"{size_skipped} files skipped due to size threshold ({threshold} bytes)")

if __name__ == '__main__':
    main()
--- ctrlc\config.py ---
import toml, os

def load_config(root: str):
    cfg = {}
    # load pyproject.toml
    path = os.path.join(root, 'pyproject.toml')
    if os.path.exists(path):
        data = toml.load(path)
        cfg = data.get('tool', {}).get('ctrlc', {})
    return cfg
--- ctrlc\core.py ---
import os, gzip, zipfile, tarfile
from .ignore import load_ignore

BUILTIN_IGNORES = {
    '.git', '.svn', '.hg', '__pycache__', '.DS_Store', 'context.txt',
    'node_modules', '.vscode', '.idea', '.env', '.venv', '.contextignore', '.gitignore'
}

def collect_files(root, ignore_mode, threshold):
    git_path = os.path.join(root, '.gitignore')
    ctx_path = os.path.join(root, '.contextignore')
    git_exists = os.path.exists(git_path)
    ctx_exists = os.path.exists(ctx_path)

    git = load_ignore(root, '.gitignore') if ignore_mode in ('all', 'git') and git_exists else None
    ctx = load_ignore(root, '.contextignore') if ignore_mode in ('all', 'context') and ctx_exists else None

    included = []
    git_ignored = 0
    ctx_ignored = 0
    size_skipped = 0
    builtin_ignored = 0

    for dirpath, dirnames, filenames in os.walk(root):
        dirnames[:] = [d for d in dirnames if d not in BUILTIN_IGNORES]

        for name in filenames:
            full = os.path.join(dirpath, name)
            rel = os.path.relpath(full, root)

            if any(part in BUILTIN_IGNORES for part in rel.split(os.sep)):
                builtin_ignored += 1
                continue

            if git and git.match_file(rel):
                git_ignored += 1
                continue
            if ctx and ctx.match_file(rel):
                ctx_ignored += 1
                continue

            if threshold and os.path.getsize(full) > threshold:
                size_skipped += 1
                continue

            included.append((full, rel))

    return included, git_ignored, ctx_ignored, size_skipped, builtin_ignored, git_exists, ctx_exists

def write_bundle(root, out_name, files, compress):
    if compress == 'gzip':
        with gzip.open(out_name + '.gz', 'wb') as out:
            for full, rel in files:
                header = f'\n--- {rel} ---\n'.encode('utf-8')
                out.write(header)
                with open(full, 'rb') as infile:
                    while True:
                        chunk = infile.read(8192)
                        if not chunk:
                            break
                        out.write(chunk)

    elif compress == 'zip':
        with zipfile.ZipFile(out_name + '.zip', 'w') as z:
            for full, rel in files:
                z.write(full, rel)

    elif compress == 'tar.gz':
        with tarfile.open(out_name + '.tar.gz', 'w:gz') as tar:
            for full, rel in files:
                tar.add(full, arcname=rel)

    else:
        with open(out_name, 'w', encoding='utf-8') as out:
            for full, rel in files:
                out.write(f'\n--- {rel} ---\n')
                try:
                    with open(full, 'r', encoding='utf-8') as infile:
                        out.write(infile.read())
                except UnicodeDecodeError:
                    out.write("[[Skipped: Binary or non-UTF8 content]]\n")


# def write_bundle(root, out_name, files, compress):
#     if compress == 'gzip':
#         with gzip.open(out_name + '.gz', 'wb') as out:
#             for full, rel in files:
#                 header = f'\n--- {rel} ---\n'.encode('utf-8')
#                 out.write(header)
#                 with open(full, 'rb') as infile:
#                     while True:
#                         chunk = infile.read(8192)
#                         if not chunk:
#                             break
#                         out.write(chunk)

#     elif compress == 'zip':
#         with zipfile.ZipFile(out_name + '.zip', 'w') as z:
#             for full, rel in files:
#                 z.write(full, rel)

#     elif compress == 'tar.gz':
#         with tarfile.open(out_name + '.tar.gz', 'w:gz') as tar:
#             for full, rel in files:
#                 tar.add(full, arcname=rel)
#     else:
#         with open(out_name, 'w') as out:
#             for full, rel in files:
#                 out.write(f'\n--- {rel} ---\n')
#                 out.write(open(full).read())
--- ctrlc\ignore.py ---
import os
from pathspec import PathSpec
from pathspec.patterns.gitwildmatch import GitWildMatchPattern

def load_ignore(root: str, filename: str):
    path = os.path.join(root, filename)
    if not os.path.exists(path):
        return None
    with open(path, 'r') as f:
        patterns = [l.strip() for l in f if l.strip() and not l.startswith('#')]
    return PathSpec.from_lines(GitWildMatchPattern, patterns)
--- ctrlc\__init__.py ---
